(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"));
	else if(typeof define === 'function' && define.amd)
		define(["React"], factory);
	else if(typeof exports === 'object')
		exports["ReactTree"] = factory(require("React"));
	else
		root["ReactTree"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */'use strict';

	var React  = __webpack_require__(1)
	var assign = __webpack_require__(3)

	var TreeNode = __webpack_require__(2)

	function emptyFn(){}

	var Tree = React.createClass({

	    displayName: 'ReactTree',

	    getDefaultProps: function(){
	        return {

	            isTree: true,

	            nodeStyle: {},

	            onNodeClick: emptyFn,

	            defaultStyle: {
	                listStyle: 'none',
	                paddingLeft: 20
	            },
	            depth: 0,
	            childrenName: 'items',
	            textName: 'name',
	            keyName : 'key',
	            collapsedName: 'collapsed',
	            defaultCollapsedName: 'defaultCollapsed',
	            preventDefaultMouseDown: true
	        }
	    },

	    getInitialState: function(){
	        return {
	            stateful: this.props.stateful,
	            collapsed: {}
	        }
	    },

	    render: function() {

	        var props = this.prepareProps(this.props, this.state)

	        delete props.data

	        return React.createElement("ul", React.__spread({},  props))
	    },

	    prepareProps: function(thisProps, state){

	        var props = {}

	        assign(props, thisProps)

	        props.style = this.prepareStyle(props, state)
	        props.children = this.prepareChildren(props, state)
	        props.onMouseDown = this.handleMouseDown

	        return props
	    },

	    prepareStyle: function(props, state){

	        var style = {}

	        assign(style, props.defaultStyle, props.style)

	        return style
	    },

	    prepareChildren: function(props, state){
	        var children = props.children

	        if (Array.isArray(props.data)){
	            children = props.data.map(this.renderNode.bind(this, props))
	        }

	        return children
	    },

	    renderNode: function(props, nodeData, index){

	        var children  = [nodeData[props.textName]]
	        var items     = nodeData[props.childrenName]
	        var collapsed = nodeData[props.collapsedName]
	        var defaultCollapsed = !!nodeData[props.defaultCollapsedName]
	        var leaf      = true

	        if (items){
	            var treeProps = assign({}, this.props, {
	                data : items,
	                depth: this.props.depth + 1
	            })
	            leaf = false

	            children.push(React.createElement(Tree, React.__spread({},  treeProps)))
	        }

	        var collapsed = this.state.collapsed[index] != null?
	                            this.state.collapsed[index]:
	                            collapsed

	        if (props.collapsed == 'all'){
	            collapsed = true
	        }
	        if (props.collapsed == 'none'){
	            collapsed = false
	        }

	        var nodeProps = {
	            depth       : this.props.depth,

	            defaultCollapsed: defaultCollapsed,
	            collapsed   : collapsed,
	            index       : index,
	            data        : nodeData,
	            children    : children,
	            leaf        : leaf,
	            style       : assign({}, props.defaultNodeStyle, props.nodeStyle),
	            collapsedStyle   : collapsed?
	                                assign({}, props.defaultNodeCollasedStyle, props.nodeCollapsedStyle):
	                                null,
	            leafStyle   : leaf?
	                            assign({}, props.defaultLeafStyle, props.leafStyle):
	                            null
	        }

	        var key = nodeData[props.keyName]
	        if (key == null){
	            key = index
	        }

	        nodeProps.onClick = this.handleNodeClick.bind(this, props, nodeProps)

	        if (props.expandTool){
	            nodeProps = props.expandTool
	        }

	        return props.nodeFactory?
	                        props.nodeFactory(nodeProps, nodeData, props):
	                        React.createElement(TreeNode, React.__spread({},  nodeProps))
	    },

	    handleMouseDown: function(event){
	        this.props.preventDefaultMouseDown && event.preventDefault()
	    },

	    handleNodeClick: function(props, nodeProps, event){

	        var nodeData = nodeProps.data
	        var newCollapsed = !nodeProps.collapsed

	        ;(this.props.onNodeClick || emptyFn)(nodeProps, event)

	        if (nodeProps.leaf){
	            return
	        }

	        if (props.stateful){
	            var collapsedState = this.state.collapsed
	            var index = nodeProps.index

	            collapsedState[index] = newCollapsed

	            this.setState({
	                collapsed: collapsedState
	            })
	        }

	        ;(this.props.onChange || emptyFn)(newCollapsed, nodeData, event)

	        var fn = newCollapsed? this.props.onCollapse: this.props.onExpand

	        ;(fn || emptyFn)(nodeData, event)
	    }
	})

	Tree.Node = TreeNode

	module.exports = Tree

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */'use strict';

	var React  = __webpack_require__(1)
	var assign = __webpack_require__(3)
	var cloneWithProps = __webpack_require__(4)
	var prefixer = __webpack_require__(5)

	function emptyFn(){}

	module.exports = React.createClass({

	    displayName: 'ReactTreeNode',

	    getInitialState: function(){
	        return {
	            defaultCollapsed: this.props.defaultCollapsed
	        }
	    },

	    getDefaultProps: function(){
	        return {
	            defaultStyle: {
	                cursor: 'pointer'
	            },
	            defaultLeafStyle: {
	                cursor: 'auto'
	            },
	            defaultCollapsedStyle: null,

	            style: null,
	            leafStyle: null,
	            collapsedStyle: null,

	            defaultClassName: '',
	            defaultLeafClassName: '',
	            defaultCollapsedClassName: '',

	            className: null,
	            leafClassName: null,
	            collapsedClassName: null,

	            expandTool: function(props){
	                var style = {
	                    transition: 'all 0.1s',
	                    display   : 'inline-block',
	                    marginRight: 6
	                }

	                if (props.collapsed){
	                    style.transform = 'rotate(-90deg)'
	                }

	                return React.createElement("span", {style: prefixer(style)}, "â–¾")
	            }
	        }
	    },

	    handleClick: function(event){
	        var props = this.props
	        var state = this.state
	        var collapsed = this.getCollapsed(props, state)

	        ;(props.onClick || emptyFn)(event, this.props, { collapsed: collapsed })

	        var newCollapsed = !collapsed

	        event.stopPropagation()

	        if (props.leaf){
	            return
	        }

	        if (props.collapsed == null){
	            this.setState({
	                defaultCollapsed: newCollapsed
	            })
	        }

	        ;(this.props.onChange || emptyFn)(newCollapsed, this.props, event)

	        var fn = newCollapsed? this.props.onCollapse: this.props.onExpand
	        ;(fn || emptyFn)(this.props, event)
	    },

	    getCollapsed: function(props, state){
	        return props.collapsed != null?
	                    props.collapsed:
	                    state.defaultCollapsed
	    },

	    render: function() {

	        var props = this.prepareProps(this.props, this.state)

	        delete props.data

	        return React.createElement("li", React.__spread({},  props))
	    },

	    prepareProps: function(thisProps, state){

	        var props = {}

	        assign(props, thisProps)

	        props.collapsed = this.getCollapsed(props, state)

	        var childrenInfo  = this.prepareChildren(props, state)

	        props.leaf     = childrenInfo.leaf

	        var expandTool = this.prepareExpandTool(props, state)
	        props.children = expandTool?
	                            [expandTool].concat(childrenInfo.children):
	                            childrenInfo.children

	        props.style     = this.prepareStyle(props, state)
	        props.className = this.prepareClassName(props, state)
	        props.onClick = this.handleClick

	        return props
	    },

	    prepareExpandTool: function(props, state){
	        if (props.leaf){
	            return
	        }
	        var expandToolProps = {
	            collapsed: props.collapsed
	        }

	        var expandTool = props.expandTool

	        return typeof expandTool == 'function'?
	                    expandTool(expandToolProps):
	                    null
	    },

	    prepareClassName: function(props, state){
	        var className = props.defaultClassName || ''

	        if (props.className){
	            className += ' ' + props.className
	        }

	        if (props.collapsed){
	            if (props.defaultCollapsedClassName){
	                className += ' ' + props.defaultCollapsedClassName
	            }
	            if (props.collapsedClassName){
	                className += ' ' + props.collapsedClassName
	            }
	        }

	        if (props.leaf){
	            if (props.defaultLeafClassName){
	                className += ' ' + props.defaultLeafClassName
	            }

	            if (props.leafClassName){
	                className += ' ' + props.leafClassName
	            }
	        }

	        if (props.depth != null){
	            className += ' tree-depth-' + props.depth
	        }

	        return className
	    },

	    prepareChildren: function(props, state){
	        var children  = props.children
	        var collapsed = props.collapsed
	        var tree

	        var result = React.Children.map(children, function(child){
	            var isTree = child && child.props && child.props.isTree
	            tree = tree || isTree

	            if (collapsed && isTree){
	                child = cloneWithProps(child, {
	                    style: assign({}, child.props.style, {
	                        display: 'none'
	                    })
	                })
	            }

	            return child
	        }, this)

	        var leaf = !tree

	        return {
	            leaf: leaf,
	            children: result
	        }
	    },

	    prepareStyle: function(props, state){

	        var style = {}

	        var leafStyle

	        if (props.leaf){
	            leafStyle = assign({}, props.defaultLeafStyle, props.leafStyle)
	        }

	        var collapsed = this.getCollapsed(props, state)
	        var collapsedStyle

	        if (collapsed){
	            collapsedStyle = assign({}, props.defaultCollapsedStyle, props.collapsedStyle)
	        }

	        assign(style, props.defaultStyle, props.style, leafStyle, collapsedStyle)

	        return style
	    }
	})

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var React    = __webpack_require__(1)
	  , hasOwn   = Object.prototype.hasOwnProperty
	  , version  = React.version.split('.').map(parseFloat)
	  , RESERVED = {
	      className:  resolve(joinClasses),
	      children:   function(){},
	      key:        function(){},
	      ref:        function(){},
	      style:      resolve(extend)
	    };

	module.exports = function cloneWithProps(child, props) {
	  var newProps = mergeProps(props, child.props);

	  if (!hasOwn.call(newProps, 'children') && hasOwn.call(child.props, 'children'))
	    newProps.children = child.props.children;

	  // < 0.11
	  if (version[0] === 0 && version[1] < 11)
	    return child.constructor.ConvenienceConstructor(newProps);
	  
	  // 0.11
	  if (version[0] === 0 && version[1] === 11)
	    return child.constructor(newProps);

	  // 0.12
	  else if (version[0] === 0 && version[1] === 12){
	    MockLegacyFactory.isReactLegacyFactory = true
	    MockLegacyFactory.type = child.type
	    return React.createElement(MockLegacyFactory, newProps);
	  }

	  // 0.13+
	  return React.createElement(child.type, newProps);

	  function MockLegacyFactory(){}
	}

	function mergeProps(currentProps, childProps) {
	  var newProps = extend(currentProps), key

	  for (key in childProps) {
	    if (hasOwn.call(RESERVED, key) )
	      RESERVED[key](newProps, childProps[key], key)

	    else if ( !hasOwn.call(newProps, key) )
	      newProps[key] = childProps[key];
	  }
	  return newProps
	}

	function resolve(fn){
	  return function(src, value, key){
	    if( !hasOwn.call(src, key)) src[key] = value
	    else src[key] = fn(src[key], value)
	  }
	}

	function joinClasses(a, b){
	  if ( !a ) return b || ''
	  return a + (b ? ' ' + b : '')
	}

	function extend() {
	  var target = {};
	  for (var i = 0; i < arguments.length; i++) 
	    for (var key in arguments[i]) if (hasOwn.call(arguments[i], key)) 
	      target[key] = arguments[i][key]   
	  return target
	}

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var el;

	if(!!global.document){
	  el = global.document.createElement('div');
	}

	var prefixes = ["ms", "Moz", "Webkit", "O"];
	var properties = [
	  'transform',
	  'transition',
	  'transformOrigin',
	  'transformStyle',
	  'transitionProperty',
	  'transitionDuration',
	  'transitionTimingFunction',
	  'transitionDelay',
	  'borderImage',
	  'borderImageSlice',
	  'boxShadow',
	  'backgroundClip',
	  'backfaceVisibility',
	  'perspective',
	  'perspectiveOrigin',
	  'animation',
	  'animationDuration',
	  'animationName',
	  'animationDelay',
	  'animationDirection',
	  'animationIterationCount',
	  'animationTimingFunction',
	  'animationPlayState',
	  'animationFillMode',
	  'appearance'
	];

	function GetVendorPrefix(property) {
	  if(properties.indexOf(property) == -1 || !global.document || typeof el.style[property] !== 'undefined'){
	    return property;
	  }

	  property = property[0].toUpperCase() + property.slice(1);
	  var temp;

	  for(var i = 0; i < prefixes.length; i++){
	    temp = prefixes[i] + property;
	    if(typeof el.style[temp] !== 'undefined'){
	      prefixes = [prefixes[i]]; // we only need to check this one prefix from now on.
	      return temp;
	    }
	  }
	  return property[0].toLowerCase() + property.slice(1);
	}


	module.exports = (function(){
	  var cache = {};
	  return function(obj){
	    if(!global.document){
	      return obj;
	    }

	    var result = {};

	    for(var key in obj){
	      if(cache[key] === undefined){
	        cache[key] = GetVendorPrefix(key);  
	      }
	      result[cache[key]] = obj[key];
	    }

	    return result;
	  };
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }
/******/ ])
});
