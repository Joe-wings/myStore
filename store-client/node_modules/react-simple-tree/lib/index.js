'use strict';

var React  = require('react')
var assign = require('object-assign')

var TreeNode = require('./TreeNode')

function emptyFn(){}

var Tree = React.createClass({

    displayName: 'ReactTree',

    getDefaultProps: function(){
        return {

            isTree: true,

            nodeStyle: {},

            onNodeClick: emptyFn,

            defaultStyle: {
                listStyle: 'none',
                paddingLeft: 20
            },
            depth: 0,
            childrenName: 'items',
            textName: 'name',
            keyName : 'key',
            collapsedName: 'collapsed',
            defaultCollapsedName: 'defaultCollapsed',
            preventDefaultMouseDown: true
        }
    },

    getInitialState: function(){
        return {
            stateful: this.props.stateful,
            collapsed: {}
        }
    },

    render: function() {

        var props = this.prepareProps(this.props, this.state)

        delete props.data

        return React.createElement("ul", React.__spread({},  props))
    },

    prepareProps: function(thisProps, state){

        var props = {}

        assign(props, thisProps)

        props.style = this.prepareStyle(props, state)
        props.children = this.prepareChildren(props, state)
        props.onMouseDown = this.handleMouseDown

        return props
    },

    prepareStyle: function(props, state){

        var style = {}

        assign(style, props.defaultStyle, props.style)

        return style
    },

    prepareChildren: function(props, state){
        var children = props.children

        if (Array.isArray(props.data)){
            children = props.data.map(this.renderNode.bind(this, props))
        }

        return children
    },

    renderNode: function(props, nodeData, index){

        var children  = [nodeData[props.textName]]
        var items     = nodeData[props.childrenName]
        var collapsed = nodeData[props.collapsedName]
        var defaultCollapsed = !!nodeData[props.defaultCollapsedName]
        var leaf      = true

        if (items){
            var treeProps = assign({}, this.props, {
                data : items,
                depth: this.props.depth + 1
            })
            leaf = false

            children.push(React.createElement(Tree, React.__spread({},  treeProps)))
        }

        var collapsed = this.state.collapsed[index] != null?
                            this.state.collapsed[index]:
                            collapsed

        if (props.collapsed == 'all'){
            collapsed = true
        }
        if (props.collapsed == 'none'){
            collapsed = false
        }

        var nodeProps = {
            depth       : this.props.depth,

            defaultCollapsed: defaultCollapsed,
            collapsed   : collapsed,
            index       : index,
            data        : nodeData,
            children    : children,
            leaf        : leaf,
            style       : assign({}, props.defaultNodeStyle, props.nodeStyle),
            collapsedStyle   : collapsed?
                                assign({}, props.defaultNodeCollasedStyle, props.nodeCollapsedStyle):
                                null,
            leafStyle   : leaf?
                            assign({}, props.defaultLeafStyle, props.leafStyle):
                            null
        }

        var key = nodeData[props.keyName]
        if (key == null){
            key = index
        }

        nodeProps.onClick = this.handleNodeClick.bind(this, props, nodeProps)

        if (props.expandTool){
            nodeProps = props.expandTool
        }

        return props.nodeFactory?
                        props.nodeFactory(nodeProps, nodeData, props):
                        React.createElement(TreeNode, React.__spread({},  nodeProps))
    },

    handleMouseDown: function(event){
        this.props.preventDefaultMouseDown && event.preventDefault()
    },

    handleNodeClick: function(props, nodeProps, event){

        var nodeData = nodeProps.data
        var newCollapsed = !nodeProps.collapsed

        ;(this.props.onNodeClick || emptyFn)(nodeProps, event)

        if (nodeProps.leaf){
            return
        }

        if (props.stateful){
            var collapsedState = this.state.collapsed
            var index = nodeProps.index

            collapsedState[index] = newCollapsed

            this.setState({
                collapsed: collapsedState
            })
        }

        ;(this.props.onChange || emptyFn)(newCollapsed, nodeData, event)

        var fn = newCollapsed? this.props.onCollapse: this.props.onExpand

        ;(fn || emptyFn)(nodeData, event)
    }
})

Tree.Node = TreeNode

module.exports = Tree