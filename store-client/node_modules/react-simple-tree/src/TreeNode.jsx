'use strict';

var React  = require('react')
var assign = require('object-assign')
var cloneWithProps = require('react-clonewithprops')
var prefixer = require('react-prefixr')

function emptyFn(){}

module.exports = React.createClass({

    displayName: 'ReactTreeNode',

    getInitialState: function(){
        return {
            defaultCollapsed: this.props.defaultCollapsed
        }
    },

    getDefaultProps: function(){
        return {
            defaultStyle: {
                cursor: 'pointer'
            },
            defaultLeafStyle: {
                cursor: 'auto'
            },
            defaultCollapsedStyle: null,

            style: null,
            leafStyle: null,
            collapsedStyle: null,

            defaultClassName: '',
            defaultLeafClassName: '',
            defaultCollapsedClassName: '',

            className: null,
            leafClassName: null,
            collapsedClassName: null,

            expandTool: function(props){
                var style = {
                    transition: 'all 0.1s',
                    display   : 'inline-block',
                    marginRight: 6
                }

                if (props.collapsed){
                    style.transform = 'rotate(-90deg)'
                }

                return <span style={prefixer(style)}>â–¾</span>
            }
        }
    },

    handleClick: function(event){
        var props = this.props
        var state = this.state
        var collapsed = this.getCollapsed(props, state)

        ;(props.onClick || emptyFn)(event, this.props, { collapsed: collapsed })

        var newCollapsed = !collapsed

        event.stopPropagation()

        if (props.leaf){
            return
        }

        if (props.collapsed == null){
            this.setState({
                defaultCollapsed: newCollapsed
            })
        }

        ;(this.props.onChange || emptyFn)(newCollapsed, this.props, event)

        var fn = newCollapsed? this.props.onCollapse: this.props.onExpand
        ;(fn || emptyFn)(this.props, event)
    },

    getCollapsed: function(props, state){
        return props.collapsed != null?
                    props.collapsed:
                    state.defaultCollapsed
    },

    render: function() {

        var props = this.prepareProps(this.props, this.state)

        delete props.data

        return <li {...props} />
    },

    prepareProps: function(thisProps, state){

        var props = {}

        assign(props, thisProps)

        props.collapsed = this.getCollapsed(props, state)

        var childrenInfo  = this.prepareChildren(props, state)

        props.leaf     = childrenInfo.leaf

        var expandTool = this.prepareExpandTool(props, state)
        props.children = expandTool?
                            [expandTool].concat(childrenInfo.children):
                            childrenInfo.children

        props.style     = this.prepareStyle(props, state)
        props.className = this.prepareClassName(props, state)
        props.onClick = this.handleClick

        return props
    },

    prepareExpandTool: function(props, state){
        if (props.leaf){
            return
        }
        var expandToolProps = {
            collapsed: props.collapsed
        }

        var expandTool = props.expandTool

        return typeof expandTool == 'function'?
                    expandTool(expandToolProps):
                    null
    },

    prepareClassName: function(props, state){
        var className = props.defaultClassName || ''

        if (props.className){
            className += ' ' + props.className
        }

        if (props.collapsed){
            if (props.defaultCollapsedClassName){
                className += ' ' + props.defaultCollapsedClassName
            }
            if (props.collapsedClassName){
                className += ' ' + props.collapsedClassName
            }
        }

        if (props.leaf){
            if (props.defaultLeafClassName){
                className += ' ' + props.defaultLeafClassName
            }

            if (props.leafClassName){
                className += ' ' + props.leafClassName
            }
        }

        if (props.depth != null){
            className += ' tree-depth-' + props.depth
        }

        return className
    },

    prepareChildren: function(props, state){
        var children  = props.children
        var collapsed = props.collapsed
        var tree

        var result = React.Children.map(children, function(child){
            var isTree = child && child.props && child.props.isTree
            tree = tree || isTree

            if (collapsed && isTree){
                child = cloneWithProps(child, {
                    style: assign({}, child.props.style, {
                        display: 'none'
                    })
                })
            }

            return child
        }, this)

        var leaf = !tree

        return {
            leaf: leaf,
            children: result
        }
    },

    prepareStyle: function(props, state){

        var style = {}

        var leafStyle

        if (props.leaf){
            leafStyle = assign({}, props.defaultLeafStyle, props.leafStyle)
        }

        var collapsed = this.getCollapsed(props, state)
        var collapsedStyle

        if (collapsed){
            collapsedStyle = assign({}, props.defaultCollapsedStyle, props.collapsedStyle)
        }

        assign(style, props.defaultStyle, props.style, leafStyle, collapsedStyle)

        return style
    }
})